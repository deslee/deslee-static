extends ../layout
block main
    h1 Getting started with Google Calendar API
    time.mr1(datetime='2014-11-23') 2014-11-23
    ul.tags.p0.inline
        li.inline
            a.tag.silver.navy.bg-darken-1.px1.mr1.rounded(href='/tags/apis') apis
        li.inline
            a.tag.silver.navy.bg-darken-1.px1.mr1.rounded(href='/tags/dev') dev
    .mt1
        p
            | I have begun experimenting with
            a(href='https://developers.google.com/google-apps/app-apis') Google Apps Application APIs
            | , with the intention of building a Javascript client-side application to interface with Google Calendar. I'm going to demonstrate what I've learned with a scenario flow for accessing the Google Calendar REST API.
        h1#what-i-ve-learned What I've learned
        p
            | Google APIs use the OAuth 2.0 protocol for authentication and authorization. In this scenario,
            |  is the process of verifying the identity of a user, and
            em Authorization
            |  is the process of determing which actions are allowed, usually based on the identity of the user. They are usually both referred to as
            em auth
            | , because both are requirements that are central to the security of a system. To understand more about the OAuth2 protocol, refer to
            a(href='http://aaronparecki.com/articles/2012/07/29/1/oauth2-simplified') this
            |  guide.
        h1#steps Steps
        p
            | In this scenario, we will use Google APIs OAuth2 protocol to request an authorization token, which will allow us to access the
            a(href='https://developers.google.com/google-apps/calendar/firstapp') Google Calendar API
        h2#setting-up-the-service Setting up the service
        p We need to set up the service (google) so it will recognize the client.
        ol
            li
                | First, go to the
                a(href='https://console.developers.google.com/project') Google Developers Console
                |  and set up a new Project.
            li Click on the Project to select it,
            li
                | Afterwards, click on the
                strong Credentials
                |  item in the menu, under the
                strong APIs & Auth
                |  section of the menu.
            li
                | Click the
                strong Create new Client ID
                |  button.
            li
                | Select
                strong Installed Application
        p
            | On the page, you will see a section titled
            strong Client ID for native application
            | . Within the section, there should be 3 items:
        ol
            li Client ID
            li Client Secret
            li Redirect URIs
        p
            | Next, click on
            strong Consent screen
            |  under the
            strong APIs & Auth
            |  section of the menu, and create your consent screen. Be sure to choose a support email address. This screen is what the user will see when he or she authenticates with the Google OAuth2 protocol.
        h2#getting-an-authorization-code Getting an authorization code
        p
            | The authorization code is used to request a Google APIs Authorization token from Google's OAuth2 protocol.
        p
            | Make a GET request to this URI:
            code https://accounts.google.com/o/oauth2/auth
        p Provide these query parameters:
        ol
            li
                em response_type
                | =code
                ul
                    li This is to tell the service that we want an authorization code
            li
                em client_id
                | =[Your Client ID]
            li
                em redirect_uri
                | =urn:ietf:wg:oauth:2.0:oob
                ul
                    li I'll explain this later
            li
                em scope
                | =
                a(href='https://www.googleapis.com/auth/calendar') https://www.googleapis.com/auth/calendar
        p Your request should look like this:
        pre.
        p
            | This will redirect to a page where the user can log into Google and grant access to your app.
        p
            | After you grant access to your app, it will redirect you to a special page with an authorization code. This is why we chose
            code urn:ietf:wg:oauth:2.0:oob
            |  as the
            code redirect_uri
            | . With this code, the application can request an
            em Authorization Token
            |  from Google APis.
        p Be sure to copy the authorization code, we will use this in the next step.
        h2#getting-an-authorization-token Getting an authorization token
        p
            | Make a POST request to this URI:
            code https://accounts.google.com/o/oauth2/token
        p
            | In the header, set
            code Content-Type
            |  to
            code application/x-www-form-urlencoded
            | .
            | 		In the request body, set these parameters:
        ol
            li
                em code
                | =[Authorization code from pervious step]
            li
                em client_id
                | =[Your Client ID]
            li
                em grant_type
                | =authorization_code
            li
                em secret
                | =[Your Client Secret]
            li
                em redirect_uri
                | urn:ietf:wg:oauth:2.0:oob
        p
            | After you make this request, you will get a JSON response. In the body data, there will be a property called
            code access_token
            | . This is the token we will use to access the Google Calendar API.
        h2#making-an-api-request- Making an API request.
        p
            | Make a GET request to this URI:
            code https://www.googleapis.com/calendar/v3/users/me/calendarList
        p
            | In the header, set
            code Authorization
            |  to
            code Bearer [Your Token]
        p
            | After you make this request, you will get a JSON response containing the user's calendar list on Google Calendar. To understand this response, consult Google's
            a(href='https://developers.google.com/google-apps/calendar/v3/reference/calendarList#resource') Resource Representation for CalendarList
            | .
        p
            | For general API documentation, see
            a(href='https://developers.google.com/google-apps/calendar/v3/reference/') this reference
            | .
        h2#play-with-the-api-explorer Play with the API explorer
        p
            | Visit the
            a(href='https://developers.google.com/apis-explorer/#s/calendar/v3/') Calendar API explorer
            |  to explore the API without needing to write any code.
